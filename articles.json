[
    {
        "id": 0,
        "description": "Jest to artykuł poświęcony budowie javy. Po przeczytaniu go, będziesz znać podstawy składni javy.",
        "content": "<h2>Postawowa struktura</h2>⁣⁣ Każda funkcja w pliku z rozszerzeniem .java, w odróżnieniu od c++ czy pythona musi być zawarta w klasie. Klasa musi mieć tą samą nazwę co plik, w innym wypadku może wyskoczy error. ⁣⁣ Jeżeli ktoś miał do czynienia z programowaniem to wie, że niektóre języki mają funkcje główne, które są urachamiane jako pierwsze po włączeniu programu. W przypadku javy to wygląda bardzo podobnie,⁣⁣ podstawową funkcją dla java jest <span style=\"font-weight: 700;\">public static void main(String[] args)</span> <pre>⁣⁣ <code class=\"hljs java\">public class Klasa{\n    public static void main(String[] args){\n        System.out.println(\"Hello world!\");\n    }\n}\n </code><code class=\"hljs\"> Output:\nHello world!\n </code> </pre> Jeżeli nie mieliście styczności z programowaniem to najprawdopodobniej nie wiecie co oznaczają takie słowa jak <b>static</b> czy <b>void</b>. Dlatego też je wam wytłumaczę! <h2>Typy funkcji</h2> Istnieje wiele typów funcji, statyczne, zwracające wartość, czy też takie które nic nie zwracają. Chwilowo zacznijmy od tego w jaki sposób zadeklarowuje się funkcję. Na podstawie ostatniej funckji i tej teoretycznej budowy przeanalizujcie to sami. <pre> <code class=\"hljs\"> [modyfikator dostępu] [słowo kluczowe] [typ funckji] [nazwa]([argumenty]) </code> </pre> Poniżej macie tabelę przedstawiającą modyfikatory dostępu i ich znaczenia. <table> <thead> <tr> <th class=\"shadowedTh\">Modyfikator</th> <th class=\"shadowedTh\">Znaczenie</th> </tr> </thead> <tbody> <tr> <td class=\"shadowedTd\">private</td> <td>Funkcja prywatna, nie można jej wywołać w innej klasie niż w jej rodzimej.</td> </tr> <tr> <td class=\"shadowedTd\">public</td> <td>Funkcja publiczna, można ją wywołać w innej klasie.</td> </tr> <tr> <td class=\"shadowedTd\">protected</td> <td>Funkcja z tym modyfikatorem może być użyta tylko w tej klasie albo w klasach dziedziczących tą klase.</td> </tr> </tbody> </table> <br> Po modyfikatorze dostępu możemy jeszcze dopisać <b>słówko kluczowe</b>. Są one bardzo potrzebne w javie, lecz są również dosyć mocno zaawansowane. Słówko kluczowe <b>static</b> powoduje że możemy odwłać się do funkcji bądź zmiennej bez tworzenia obiektu, a <b>final</b> tworzy <i>stałą</i> - czyli schowek którego nie można zmienić bądź funkcję której nie można dziedziczyć.",
        "title": "Budowa języka - javy"
    },
    {
        "id": 1,
        "description": "Artyuł ten poświęcony jest słówku kluczowym static. Po przeczytaniu go powinieneś wiedzieć co nam daje te słówko i gdzie je stosować.",
        "content": "⁣⁣<h2>Co oznacza Static?</h2> Static to taki atrybut który można nadać metodzie, bądź zmiennej lub stałej. Jednak co on nam daje? No daje dosyć sporo, bo dzięki niemu możemy przywoływać funckję bądź zmienne bez tworzenia niepotrzebnych <b>obiektów</b>. Co pozwala nam zaoszczędzić pare linijek w kodzie. Jednak w jakich przypadkach byśmy go używali? Dajmy na to że chcemy stworzyć metode która będzie pokazywałą użytkownikowi aplikacji komunikat. Wtedy tworzenie obiektu byłoby bardzo uciążliwe, dlatego używa się funkcji statycznych. Poniżej prosta funkcja z javy która pokazuje komunikat na adroidzie. <pre> <code class=\"hljs java\"> Toast.makeText(getContext(), \"Złe hasło!\", Toast.LENGTH_LONG).show(); </code> </pre> Jeżeli funkcja <i>makeText()</i> byłaby <b>niestatyczna</b>, wtedy musielibyśmy wprowadzić taki zapis: <pre> <code class=\"hljs java\"> Toast toast = new Toast();\n toast.makeText(getContext(), \"Złe hasło!\", Toast.LENGTH_LONG);\n toast.show(); </code> </pre> Jak widzicie pierwszy zabis jest o wiele korzystniejszy i bardziej praktyczny. <h2>Jak go używać?</h2> Załóżmy że chcemy napisać skomplikowany program który będzie się witał za każdym razym gdy użytkownik napisze <i>\"Hi!\"</i>. Jako iż poziom skomplikowania jest arcytrudny, to wytłumacze wam krok po kroku co my tu robimy! Najpierw używając klasy <b>Scanner</b>. Damy jej argument System.in co znaczy że będziemy operować na tekstcie pozyskanym od użytkownika. Jak sama nazwa wskazuje to co dostaje system, wchodzi w system. <pre> <code class=\"hljs java\"> Scanner scan = new Scanner(System.in); </code> </pre> Dobrze więc mamy już stworzony obiekt Scanner o nazwie scan który operuje na tym co wysłał użytkownik... Może więc teraz zapytamy się użytkownika o imię? <pre> <code class=\"hljs java\"> System.out.println(\"Przedstaw się!\");\n String name = scan.nextLine(); </code> </pre> Najpierw wyświetlamy na ekranie tekst <i>\"Przedstaw się!\"</i> a następnie tworzymy zmienną <b>name</b> która przyjmuje następną linie którą napisze użytkownik. Dobrze skoro znamy już jego imię to może niech się przywitamy? <pre> <code class=\"hljs java\"> System.out.println(\"Przywitaj się!\");\n String hi = scan.nextLine(); </code> </pre> Dobra najprostsza część za nami. Teraz stworzymy publiczną klase która będzie w sobie miała publiczną statyczną metode która zwraca napis <i>Hello</i> z doklejonym imieniem użytkownika. <pre> <code class=\"hljs java\"> public class Przywitanie{\n    public static String sayHello(String name){\n       return \"Hello\"+name+\"!\";\n    }\n } </code> </pre> Dobrze a więc skoro już mamy klasę <b>Przywitanie</b> to możemy się witać! wywołajmy ją takim kodem: <pre> <code class=\"hljs java\"> Przywitanie.sayHello(name); </code> </pre> Pamiętajmy że wcześniej <b>name</b> to była nasza zmienna która przechowuje imię. Jednak może sprawdzimy czy użytkownik naprawdę się przywitał, czy może był prostakiem bez klasy? Więc if'em sprawdze czy name jest równe <i>\"Hi!\"</i>. Użyje do tego metody <b>equals()</b>. <pre> <code class=\"hljs java\"> if(hi.equals(\"Hi!\")) System.out.println(Przywitanie.sayHello(name)); </code> </pre> Dobrze a więc teraz daje wam cały kod z dwoma klasami i wynikiem aplikacji! <pre> <code class=\"hljs java\"> public class Przedstaw{\n      public static String sayHello(String name){\n           return \"Hello \"+name+\"!\";\n      }\n }\n \n import java.util.Scanner;\n \n public class Main{\n       public static void main(String[] args){\n           Scanner scan = new Scanner(System.in);\n \n           System.out.println(\"Przedstaw się!\");\n           String name = scan.nextLine();\n \n           System.out.println(\"Przywitaj się!\");\n           String hi = scan.nextLine();\n \n           if(hi.equals(\"Hi!\")) System.out.println(Przedstaw.sayHello(name));\n       }\n }\n \n \n Output:\n \n Przedstaw się!\n Czarek\n Przywitaj się!\n Hi!\n Hello Czarek! </code> </pre>",
        "title": "Słówko kluczowe - Static⁣⁣⁣⁣"
    },
    {
        "id": 2,
        "description": "Po przeczytaniu tego artykułu będziesz wiedział co to słówko kluczowe finaj i jak je używać.",
        "content": "<h2>Jak działa final?</h2> Final to atrybut funkcji bądź wartości który tworzy ją stałą, czyli nie da się jej nadpisać ani zmienić. Jest przydatny w miejscach gdy chcemy aby użytkownik mógł określić rodzaj elementu w metodzie poprzez liczbę zawartą w zmiennej. Łatwiej owiele zrozumieć o co chodzi gdy do atrybutu metody o nazwie <i>\"elementType\"</i> nadamy wartość [klasa].bigElement którego wartość to liczba całkowita, zamiast napisać zwykłą liczbę. Jednak największym problemem nie jest napisanie liczby, a jej <b>zapamiętanie</b>! Jak już wspominałem nie da się zmienić wartości stałej(czyli \"zmiennej\" ze słówkiem kluczowym final). Ale najpierw zapytajmy się...<h2>Co to stała?</h2> Jeżeli ktoś z was uważał na fizyce to wie że stała to wartość która nie ulega zmianie, np. V = const, czyli prędkość na przestrzeni czasu jest stała, nie ulega zmianie. I w <b>TYM</b> cały szczegół. Zmienną można zmieniać a stałą nie! W javascrip'cie zmienne ustawia się słowem <b>var</b> które oznacza variable - zmienna, natomiast stałą słowem <b>const</b> czyli constans - stała. W javie każda wartość jest zmiennę jeżeli <b>NIE MA</b> wartości <b>final</b>. Czyli w takim przypadku wszystko pójdzie dobrze: <pre> <code class=\"hljs java\">public class Main{\n    static int i = 5;\n    public static void main(String[] args){\n        i = 8;\n    }\n} </code> </pre> Natomiast gdy zmienna i będzie stałą czyli zapis będzie wyglądać tak: <pre> <code class=\"hljs java\"> static final int i = 5; </code> </pre> Na ekranie wyrzuci nam <span style=\"color: #D0041f;\"><b>errora</b></span>. Dobra skoro już coś wiemy to przejdźmy do prostego projektu.<h2>Kod!</h2> Stworzymy program który będzie wyświetlał napis \"color\" w różnym kolorze, zależnie od wartości. Oczywiście użyjemy w klasie showColor stałych które będą określać kolor. Do zmieny koloru użyjemy <b>ASNI</b>. Jest to w skrócie standard do określania wyglądu terminala. Wpierw stworzymy 4 stałe, jedna będzie prywatna a trzy publiczne. Prywatna służyć nam będzie do ustawiania koloru na domyślny, a 3 publiczne do ustawiania koloru tekstu. <pre> <code class=\"hljs java\">public class showColor{\n    private static final String ANSI_RESET = \"\\u001B[0m\";\n    public static final String ANSI_RED = \"\\u001B[31m\";\n    public static final String ANSI_GREEN = \"\\u001B[32m\";\n    public static final String ANSI_BLUE = \"\\u001B[34m\";\n\n    public static void showColoredText(String text, String color){\n        System.out.println(color + text + ANSI_RESET);\n    }\n}</code> </pre> Teraz w głównej klasie wystarczy wywołać funkcję i napawać się owocem naszej pracy! <pre> <code class=\"hljs java\">public class Test{\n    public static void main(String[] args) {\n        Test2.showColoredText(\"Kocham jave\", Test2.ANSI_RED);\n        Test2.showColoredText(\"Fajne są te kwiatki\", Test2.ANSI_GREEN);\n        Test2.showColoredText(\"Twoje oczy są błękitne jak bezchmurne niebo ( ͡° ͜ʖ ͡°)\", Test2.ANSI_BLUE);\n    }\n} </code> </pre> <pre> <code class=\"hljs\">Output:\n<span style=\"color: red;\">Kocham jave</span>\n<span style=\"color: green;\">Fajne są te kwiatki</span>\n<span style=\"color: blue;\">Twoje oczy są błękitne jak bezchmurne niebo ( ͡° ͜ʖ ͡°)</span> </code> </pre>",
        "title": "Słówko kluczowe - final"
    },
    {
        "id": 3,
        "description": "Ten artykuł mówi o zmiennych, po przeczytaniu go będziesz wiedzieć jakie istnieją typy zmiennych w javie.",
        "content": "<h2>Co to zmienna?</h2> Zmienna w informatyce to tak jakby <i>\"szufladka\"</i> w pamięci podręcznej naszego komputera. Można ją dowolnie edytować, czyli na początku kodu można jej nadać wartość 5, w połowie 10 a na końcu 154. Zmienne są jedną z najważniejszych tworów w Javie. Nie ma żadnej funkcji bez zmiennej <b>Ż A D N E J</b>. W javascriptcie istnieje typ zmiennej który sam domyśla się jego typu i w <b>każdym</b> momencie możemy zmienić typ ów zmiennej, nazywa się <b>var</b>. W javie sprawa się komplikuje, ponieważ choć istnieje <b>var</b> w javie, to działa trochę inaczej. Poniżej będziesz mógł przeczytać o każdym typu zmiennej w javie. <h2>Zmienne liczbowe</h2> Zmienne liczbowe w javie dzielą się na zmienne <b>całkowite</b> i zmienne <b>rzeczywiste</b>. Różnica między nimi jest taka że w te drugie posiadają liczby po przecinku np. 2,5. <h4>Zmienne Całkowite</h4> Każdą zmienną deklaruje się w identyczny sposób, różniaca jest w jej wielkości w systemie i w jej zakresie. Poniżej umieściłem tabelę ze wszystkimi danymi: <table> <thead> <tr> <th class=\"shadowedTh\">Zmienna</th> <th class=\"shadowedTh\">Wielkość w pamięci podręcznej</th> <th class=\"shadowedTh\">Zakres</th> </tr> </thead> <tbody> <tr> <td class=\"shadowedTd\">byte</td> <td>1 bajt</td> <td>od -128 do 127</td> </tr> <tr> <td class=\"shadowedTd\">short</td> <td>2 bajt</td> <td>od -32 768 do 32 767</td> </tr> <tr> <td class=\"shadowedTd\">int</td> <td>4 bajt</td> <td>od -2 147 483 648 do 2 147 483 647</td> </tr> <tr> <td class=\"shadowedTd\">long</td> <td>8 bajt</td> <td>od -2^63 do (2^63)-1</td> </tr> </tbody> </table> <h4>Zmienne Rzeczywiste</h4> <table> <thead> <tr> <th class=\"shadowedTh\">Zmienna</th> <th class=\"shadowedTh\">Wielkość w pamięci podręcznej</th> <th class=\"shadowedTh\">Zakres</th> </tr> </thead> <tbody> <tr> <td class=\"shadowedTd\">float</td> <td>4 bajt</td> <td>maksymalnie około 6 liczb po przecinku</td> </tr> <tr> <td class=\"shadowedTd\">double</td> <td>8 bajt</td> <td>maksymalnie około 15 liczb po przecinku</td> </tr> </tbody> </table> <h2>Zmienne Znakowe</h2> Pamiętajmy nie w programowaniu nie ma samych liczb, czasem trzeba coś napisać na ekranie itp. Dlatego istnieją równierz zmienne posiadające znaki. W javie istnieją dwa typy zmiennych które przechowują znaki - pierwszą jest <b>char</b> posiada ona same pojedyńcze znaki. Nie może mieć dwóch znaków, lecz może posiadać tabulację, spację, enter itp. Następnym typem ciąg(łańcuch) znaków <b>String</b>. Może on posiadać jakąkolwiek ilość różnych znaków. Co <b>ważne</b> pojedyńcze znaki zapisujemy w apostrofach a ciągi znaków w cudzysłowie. <pre> <code class=\"hljs java\">char znak = 'c';\nString ciag = \"ciąg znaków\";</code> </pre> Istnieją równierz znaki specjalne które można utrzymać wpisując poniższe wartości: <table> <thead> <tr> <th class=\"shadowedTh\">Nazwa</th> <th class=\"shadowedTh\">Wartość</th> </tr> </thead> <tbody> <tr> <td class=\"shadowedTd\">\\t</td> <td>Tabulator</td> </tr> <tr> <td class=\"shadowedTd\">\\n</td> <td>Nowa linijka</td> </tr> <tr> <td class=\"shadowedTd\">\\r</td> <td>Carriage return</td> </tr> </tbody> </table> Jeżeli chcemy napisać jakiś znak typu cudzysłów czy apostrof to przed niego musimy dodać <i>\"\\\"</i>, aby kompilator wiedział że chodzi nam o tekst a nie o znak specjalny. <h2>Zmienne Prawda/Fałsz</h2> Doszliśmy do przedostatniego rodzaju zmiennych. Nazywają się - <b>boolean</b>. Przechowuje on albo <b>true</b> - czyli prawdę, albo <b>false</b> - fałsz. <h2>Zmienna Var</h2> Zmienna ów jest najnowszą zmienną w Javie. Powstała wraz z javą 10 i pozwala na <b>automatyczne</b> przypisanie typu zmiennej do wartości. Lecz nie da się zmieniać typu zmiennej dynamicznie. Jeżeli program raz ustawi typ zmiennej na int a potem nadamy tej zmiennej wartość z przecinkiem to otrzymamy error. <b>Co ciekawe</b> nie da się nazwać zmiennej nazwą typu zmiennej, <b>LECZ</b> występuje wyjątek z var. Powstał on ponieważ któś mógł posiadać w swoim programie zmienną o nazwie var przed tym jak wprowadzili ten typ zmiennej. Jeżeli nagle by odmówili możliwości nadawania takowych nazw zmiennym to niektóre programy by odmawiały posłuszeństwa i by potrzebowały nagłych zmian. </div>",
        "title": "Typy zmiennych w Javie"
    }
]